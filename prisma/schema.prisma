// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  role      Role     @default(USER)
  status    UserStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  accounts     Account[]
  sessions     Session[]
  invoices     Invoice[]
  customers    Customer[]
  employees    Employee[]
  projects     Project[]
  tasks        Task[]
  auditLogs    AuditLog[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Accounting Module
model Invoice {
  id          String        @id @default(cuid())
  number      String        @unique
  customerId  String
  userId      String
  amount      Decimal       @db.Decimal(10, 2)
  tax         Decimal       @db.Decimal(10, 2) @default(0)
  total       Decimal       @db.Decimal(10, 2)
  status      InvoiceStatus @default(DRAFT)
  dueDate     DateTime
  issuedDate  DateTime      @default(now())
  paidDate    DateTime?
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relationships
  customer Customer @relation(fields: [customerId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
  items    InvoiceItem[]
  payments Payment[]

  @@map("invoices")
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  productId   String?
  description String
  quantity    Int
  unitPrice   Decimal @db.Decimal(10, 2)
  total       Decimal @db.Decimal(10, 2)

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])

  @@map("invoice_items")
}

model Payment {
  id        String        @id @default(cuid())
  invoiceId String
  amount    Decimal       @db.Decimal(10, 2)
  method    PaymentMethod
  reference String?
  paidAt    DateTime      @default(now())
  createdAt DateTime      @default(now())

  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@map("payments")
}

// CRM Module
model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  address   String?
  city      String?
  country   String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  invoices Invoice[]
  leads    Lead[]

  @@map("customers")
}

model Lead {
  id         String     @id @default(cuid())
  name       String
  email      String
  phone      String?
  company    String?
  source     String?
  status     LeadStatus @default(NEW)
  value      Decimal?   @db.Decimal(10, 2)
  customerId String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  customer Customer? @relation(fields: [customerId], references: [id])

  @@map("leads")
}

// Inventory Module
model Product {
  id          String   @id @default(cuid())
  name        String
  sku         String   @unique
  description String?
  price       Decimal  @db.Decimal(10, 2)
  cost        Decimal  @db.Decimal(10, 2)
  stock       Int      @default(0)
  minStock    Int      @default(0)
  categoryId  String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category     Category?     @relation(fields: [categoryId], references: [id])
  invoiceItems InvoiceItem[]

  @@map("products")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]

  @@map("categories")
}

// HR Module
model Employee {
  id           String    @id @default(cuid())
  employeeId   String    @unique
  firstName    String
  lastName     String
  email        String    @unique
  phone        String?
  position     String
  department   String
  salary       Decimal   @db.Decimal(10, 2)
  hireDate     DateTime
  isActive     Boolean   @default(true)
  userId       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user    User   @relation(fields: [userId], references: [id])
  tasks   Task[]

  @@map("employees")
}

// Project Management Module
model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  startDate   DateTime
  endDate     DateTime?
  budget      Decimal?      @db.Decimal(10, 2)
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user  User   @relation(fields: [userId], references: [id])
  tasks Task[]

  @@map("projects")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  projectId   String?
  assigneeId  String?
  userId      String
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  project  Project?  @relation(fields: [projectId], references: [id])
  assignee Employee? @relation(fields: [assigneeId], references: [id])
  user     User      @relation(fields: [userId], references: [id])

  @@map("tasks")
}

// Audit Log
model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  resource  String
  details   Json?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// Enums
enum Role {
  ADMIN
  MANAGER
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  CHEQUE
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
